
import os
from haxe.config import Config
import haxe.haxe_complete
import sys

import haxe.output_panel

haxe_complete = sys.modules["haxe.haxe_complete"]

def find_types (classpaths, libs, projectPath):
	classes = []
	packs = []

	cp = []
	cp.extend( classpaths )

	for lib in libs :
		if lib is not None :
			cp.append( lib.path )


	for path in cp :
		c, p = haxe_complete.extract_types( os.path.join( projectPath, path ) )
		classes.extend( c )
		packs.extend( p )

	
	
	classes.sort()
	packs.sort()

	return classes,packs



class HaxeBuild :

	#auto = None
	targets = Config.targets
	nme_targets = Config.nme_targets
	nme_target = Config.nme_target

	def __init__(self) :

		self.args = []
		self.main = None
		self.target = None
		self.output = "dummy.js"
		self.hxml = None
		self.nmml = None
		self.classpaths = []
		self.libs = []
		self.classes = None
		self.packages = None
 

	def equals (self, other):
		
		return (self.args == other.args 
			and self.main == other.main
			and self.target == other.target
			and self.output == other.output
			and self.hxml == other.hxml
			and self.nmml == other.nmml
			and self.classpaths == other.classpaths
			and self.libs == other.libs)
		   
		

	def copy (self):
		hb = HaxeBuild()
		hb.args = list(self.args)
		hb.main = self.main
		hb.target = self.target
		hb.output = self.output
		hb.hxml = self.hxml
		hb.nmml = self.nmml
		hb.classpaths = list(self.classpaths)
		hb.libs = list(self.libs)
		hb.classes = list(self.classes) if self.classes is not None else None
		hb.packages = list(self.packages) if self.packages is not None else None
		return hb

	def get_build_folder (self):
		r = None
		if self.hxml is not None:
			r = os.path.dirname(self.hxml)
		elif self.nmml is not None:
			r = os.path.dirname(self.nmml)

		return r
	

	def set_build_cwd (self):
		self.set_cwd(self.get_build_folder())
	def add_classpath (self, cp):
		self.classpaths.append(cp)
		self.args.append(("-cp", cp))
	
	def get_classpath (self, file):
		for cp in self.classpaths:
			if file.startswith(cp):
				return cp

		return None

	def is_file_in_classpath (self, file):
		return self.get_classpath(file) is not None

	def get_relative_path (self, file):
		cp = self.get_classpath(file)
		if cp is not None:
			return file.replace(cp, "")[1:]
		else:
			return None

	def to_string(self) :
		out = os.path.basename(self.output)
		if self.nmml is not None:
			return "{out} ({target})".format(self=self, out=out, target=HaxeBuild.nme_target[0]);
		else:
			return "{main} ({target}:{out})".format(self=self, out=out, main=self.main, target=self.target);
		#return "{self.main} {self.target}:{out}".format(self=self, out=out);
	
	def make_hxml( self ) :
		outp = "# Autogenerated "+self.hxml+"\n\n"
		outp += "# "+self.to_string() + "\n"
		outp += "-main "+ self.main + "\n"
		for a in self.args :
			outp += " ".join( list(a) ) + "\n"
		
		d = os.path.dirname( self.hxml ) + "/"
		
		# relative paths
		outp = outp.replace( d , "")
		outp = outp.replace( "-cp "+os.path.dirname( self.hxml )+"\n", "")

		outp = outp.replace("--no-output " , "")
		outp = outp.replace("-v" , "")

		outp = outp.replace("dummy" , self.main.lower() )

		#print( outp )
		return outp.strip()


	def update_types(self):

		haxe.output_panel.HaxePanel.status("haxe-debug", "updating types")



		classes, packages = find_types(self.classpaths, self.libs, os.path.dirname( self.hxml ) )



		self.classes = classes;
		self.packages = packages;

	def set_cwd (self, cwd):
		self.args.append(("--cwd" , cwd ))

	def set_times (self):
		self.args.append(("--times", ""))
		self.args.append(("-D", "macro-times"))
		self.args.append(("-D", "macro_times"))

	def set_server_mode (self, server_port = 6000):
		self.args.append(("--connect" , str(server_port)))

	def get_command_args (self, haxe_path):
		cmd = [haxe_path]
		for a in self.args :
			cmd.extend( list(a) )
		return cmd

	def set_auto_completion (self, display, macro_completion = False):
		
		args = self.args

		def filterTargets (x):
			return x[0] != "-cs" and x[0] != "-x" and x[0] != "-js" and x[0] != "-php" and x[0] != "-cpp" and x[0] != "-swf" and x[0] != "-java"

		if macro_completion:
			args = filter(filterTargets, args )	
		else:
			args = map(lambda x : ("-neko", x[1]) if x[0] == "-x" else x, args)

		args = args

		if (macro_completion) :
			args.append(("-neko", "__temp.n"))


		args.append( ("--display", display ) )
		args.append( ("--no-output" , "") )

		self.args = args


	def get_types( self ) :
		if self.classes is None or self.packages is None :
			self.update_types()

		return self.classes, self.packages

	

