
import os
from haxe.config import Config
import haxe.haxe_complete
import sys


haxe_complete = sys.modules["haxe.haxe_complete"]

def find_types (classpaths, libs, projectPath):
	classes = []
	packs = []

	cp = []
	cp.extend( classpaths )

	for lib in libs :
		if lib is not None :
			cp.append( lib.path )

	#print("extract types :")
	#print(cp)
	for path in cp :
		c, p = haxe_complete.extract_types( os.path.join( projectPath, path ) )
		classes.extend( c )
		packs.extend( p )

	classes.sort()
	packs.sort()

	return classes,packs



class HaxeBuild :

	#auto = None
	targets = Config.targets
	nme_targets = Config.nme_targets
	nme_target = Config.nme_target

	def __init__(self) :

		self.args = []
		self.main = None
		self.target = None
		self.output = "dummy.js"
		self.hxml = None
		self.nmml = None
		self.classpaths = []
		self.libs = []
		self.classes = None
		self.packages = None
 
	def copy (self):
		hb = HaxeBuild()
		hb.args = self.args
		hb.main = self.main
		hb.target = self.target
		hb.output = self.output
		hb.hxml = self.hxml
		hb.nmml = self.nmml
		hb.classpaths = self.classpaths
		hb.libs = self.libs
		hb.classes = self.classes
		hb.packages = self.packages
		return hb



	def to_string(self) :
		out = os.path.basename(self.output)
		if self.nmml is not None:
			return "{out} ({target})".format(self=self, out=out, target=HaxeBuild.nme_target[0]);
		else:
			return "{main} ({target}:{out})".format(self=self, out=out, main=self.main, target=self.target);
		#return "{self.main} {self.target}:{out}".format(self=self, out=out);
	
	def make_hxml( self ) :
		outp = "# Autogenerated "+self.hxml+"\n\n"
		outp += "# "+self.to_string() + "\n"
		outp += "-main "+ self.main + "\n"
		for a in self.args :
			outp += " ".join( list(a) ) + "\n"
		
		d = os.path.dirname( self.hxml ) + "/"
		
		# relative paths
		outp = outp.replace( d , "")
		outp = outp.replace( "-cp "+os.path.dirname( self.hxml )+"\n", "")

		outp = outp.replace("--no-output " , "")
		outp = outp.replace("-v" , "")

		outp = outp.replace("dummy" , self.main.lower() )

		#print( outp )
		return outp.strip()


	def update_types(self):
		classes, packs = find_types(self.classpaths, self.libs, os.path.dirname( self.hxml ) )

		self.classes = classes;
		self.packs = packs;

	def get_types( self ) :
		if self.classes is None or self.packs is None :
			self.update_types()

		return self.classes, self.packs

	

