
import os
from haxe.config import Config
import haxe.haxe_complete
import sys


haxe_complete = sys.modules["haxe.haxe_complete"]

class HaxeBuild :

	#auto = None
	targets = Config.targets
	nme_targets = Config.nme_targets
	nme_target = Config.nme_target

	def __init__(self) :

		self.args = []
		self.main = None
		self.target = None
		self.output = "dummy.js"
		self.hxml = None
		self.nmml = None
		self.classpaths = []
		self.libs = []
		self.classes = None
		self.packages = None
 
	def to_string(self) :
		out = os.path.basename(self.output)
		if self.nmml is not None:
			return "{out} ({target})".format(self=self, out=out, target=HaxeBuild.nme_target[0]);
		else:
			return "{main} ({target}:{out})".format(self=self, out=out, main=self.main, target=self.target);
		#return "{self.main} {self.target}:{out}".format(self=self, out=out);
	
	def make_hxml( self ) :
		outp = "# Autogenerated "+self.hxml+"\n\n"
		outp += "# "+self.to_string() + "\n"
		outp += "-main "+ self.main + "\n"
		for a in self.args :
			outp += " ".join( list(a) ) + "\n"
		
		d = os.path.dirname( self.hxml ) + "/"
		
		# relative paths
		outp = outp.replace( d , "")
		outp = outp.replace( "-cp "+os.path.dirname( self.hxml )+"\n", "")

		outp = outp.replace("--no-output " , "")
		outp = outp.replace("-v" , "")

		outp = outp.replace("dummy" , self.main.lower() )

		#print( outp )
		return outp.strip()

	def get_types( self ) :
		if self.classes is None or self.packs is None :
			classes = []
			packs = []

			cp = []
			cp.extend( self.classpaths )

			for lib in self.libs :
				if lib is not None :
					cp.append( lib.path )

			#print("extract types :")
			#print(cp)
			for path in cp :
				c, p = haxe_complete.extract_types( os.path.join( os.path.dirname( self.hxml ), path ) )
				classes.extend( c )
				packs.extend( p )

			classes.sort()
			packs.sort()

			self.classes = classes;
			self.packs = packs;

		return self.classes, self.packs

