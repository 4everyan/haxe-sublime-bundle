complete.py


Refactoring/Cleanup/Features

Priority 1

- split hx_normal_auto_complete in smaller functions
- split get_toplevel_completion in smaller functions
- show compiler hints in a nice way (done, but not perfect)
- configurable logging (done)
- rename hxtools to tools.hx or tools.source.hx
- make sure that event listeners are only working/responding when necessary (haxe files)
- rename haxe.build.HaxeBuild to haxe.build.Build (done)
- splitting completion in multiple modules (complete.hx, complete.hxsl, complete.erazor, complete.nmml), maybe better in the long term. Add eventlisteners for each syntax, or is this very expensive?
- get nme compilation/completion working
- improve toplevel algorithm (could be a lot faster) (partially done, caching of file types based on modification time)
- syntax color bugfixing (functions, abstracts)
- better error reporting (highlights in view)
- toplevel completion info should distinguish between class, enum, abstract, interface, typedef
- "new" completion should only provide classes and typedefs (possible classes)
- move temp and log to tools
- add all public static function to separetly triggered top level completion 
- collect more valuable information inside of types.py because it's cached (type descriptions, private, static functions)

Priority 2

- check errors on save (in background)
- add more completion options (more customization)
- improve toplevel completion (customizable exclude/include of packages)
 	f.e. nme should by default only show nme completions (target specific only with additional includes)

- add jump to declaration (with compiler help): 

	f.e. 

	MyClass.fo|o ( | reprensents the mouse cursor)
	is translated to

	using hxsublime.FindDeclaration;
	MyClass.sublimeFindDeclaration("foo").| (trigger a compiler completion)

	the macro sublimeFindDeclaration detects the type of MyClass and searches the declaration of foo (could be a normal static method/var, instance method/var or using method (test unification and preserve order))

- add get type of expression command (with macro)
	the type should be printed into the output panel.

- find references + refactoring 
	i have some compiler based ideas, but it doesn't work for references inside of macros. Maybe it's better to
	wait for compiler based ide services.



